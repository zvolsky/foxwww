(dp1
S'output'
p2
S'<type \'exceptions.RuntimeError\'> Failure to connect, tried 5 times:\nTraceback (most recent call last):\n  File "C:\\Python27\\Lib\\site-packages\\web2py\\gluon\\dal\\base.py", line 410, in __init__\n    self._adapter = ADAPTERS[self._dbname](**kwargs)\n  File "C:\\Python27\\Lib\\site-packages\\web2py\\gluon\\dal\\adapters\\base.py", line 47, in __call__\n    obj = super(AdapterMeta, cls).__call__(*args, **kwargs)\n  File "C:\\Python27\\Lib\\site-packages\\web2py\\gluon\\dal\\adapters\\sqlite.py", line 78, in __init__\n    if do_connect: self.reconnect()\n  File "C:\\Python27\\Lib\\site-packages\\web2py\\gluon\\dal\\connection.py", line 92, in reconnect\n    self.connection = f()\n  File "C:\\Python27\\Lib\\site-packages\\web2py\\gluon\\dal\\adapters\\sqlite.py", line 76, in connector\n    return self.driver.Connection(dbpath, **driver_args)\nOperationalError: unable to open database file\n'
p3
sS'layer'
p4
S'C:\\Python27\\Lib\\site-packages\\web2py\\applications\\viewer\\models\\db.py'
p5
sS'code'
p6
S"# -*- coding: utf-8 -*-\n\n## if SSL/HTTPS is properly configured and you want all HTTP requests to\n## be redirected to HTTPS, uncomment the line below:\n# request.requires_https()\n\nif not request.env.web2py_runtime_gae:\n    ## if NOT running on Google App Engine use SQLite or other DB\n    db = DAL('sqlite://storage.sqlite',pool_size=1,check_reserved=['sqlite'])\n    dbu = DAL('sqlite://upload.sqlite',pool_size=1,check_reserved=['sqlite'],\n            folder='upload')\nelse:\n    ## connect to Google BigTable (optional 'google:datastore://namespace')\n    db = DAL('google:datastore+ndb')\n    ## store sessions and tickets there\n    session.connect(request, response, db=db)\n    ## or store session in Memcache, Redis, etc.\n    ## from gluon.contrib.memdb import MEMDB\n    ## from google.appengine.api.memcache import Client\n    ## session.connect(request, response, db = MEMDB(Client()))\n\n## by default give a view/generic.extension to all actions from localhost\n## none otherwise. a pattern can be 'controller/function.extension'\nresponse.generic_patterns = ['*'] if request.is_local else []\n\n## (optional) optimize handling of static files\n# response.optimize_css = 'concat,minify,inline'\n# response.optimize_js = 'concat,minify,inline'\n## (optional) static assets folder versioning\n# response.static_version = '0.0.0'\n#########################################################################\n## Here is sample code if you need for\n## - email capabilities\n## - authentication (registration, login, logout, ... )\n## - authorization (role based authorization)\n## - services (xml, csv, json, xmlrpc, jsonrpc, amf, rss)\n## - old style crud actions\n## (more options discussed in gluon/tools.py)\n#########################################################################\n\nfrom gluon.tools import Auth, Service, PluginManager\n\nauth = Auth(db)\nservice = Service()\nplugins = PluginManager()\n\n## create all tables needed by auth if not custom tables\nauth.define_tables(username=False, signature=False)\n\n## configure email\nmail = auth.settings.mailer\nmail.settings.server = 'logging' if request.is_local else 'smtp.gmail.com:587'\nmail.settings.sender = 'you@gmail.com'\nmail.settings.login = 'username:password'\n\n## configure auth policy\nauth.settings.registration_requires_verification = False\nauth.settings.registration_requires_approval = False\nauth.settings.reset_password_requires_verification = True\n\n## if you need to use OpenID, Facebook, MySpace, Twitter, Linkedin, etc.\n## register with janrain.com, write your domain:api_key in private/janrain.key\nfrom gluon.contrib.login_methods.janrain_account import use_janrain\nuse_janrain(auth, filename='private/janrain.key')\n\n#########################################################################\n## Define your tables below (or better in another model file) for example\n\nfrom db_model import get_model\ndbu = get_model(dbu)\n\n## after defining tables, uncomment below to enable auditing\n# auth.enable_record_versioning(db)\n\n"
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "C:\\Python27\\Lib\\site-packages\\web2py\\gluon\\restricted.py", line 224, in restricted\n    exec ccode in environment\n  File "C:\\Python27\\Lib\\site-packages\\web2py\\applications\\viewer\\models\\db.py", line 11, in <module>\n    folder=\'upload\')\n  File "C:\\Python27\\Lib\\site-packages\\web2py\\gluon\\dal\\base.py", line 432, in __init__\n    raise RuntimeError("Failure to connect, tried %d times:\\n%s" % (attempts, tb))\nRuntimeError: Failure to connect, tried 5 times:\nTraceback (most recent call last):\n  File "C:\\Python27\\Lib\\site-packages\\web2py\\gluon\\dal\\base.py", line 410, in __init__\n    self._adapter = ADAPTERS[self._dbname](**kwargs)\n  File "C:\\Python27\\Lib\\site-packages\\web2py\\gluon\\dal\\adapters\\base.py", line 47, in __call__\n    obj = super(AdapterMeta, cls).__call__(*args, **kwargs)\n  File "C:\\Python27\\Lib\\site-packages\\web2py\\gluon\\dal\\adapters\\sqlite.py", line 78, in __init__\n    if do_connect: self.reconnect()\n  File "C:\\Python27\\Lib\\site-packages\\web2py\\gluon\\dal\\connection.py", line 92, in reconnect\n    self.connection = f()\n  File "C:\\Python27\\Lib\\site-packages\\web2py\\gluon\\dal\\adapters\\sqlite.py", line 76, in connector\n    return self.driver.Connection(dbpath, **driver_args)\nOperationalError: unable to open database file\n\n'
p11
s.